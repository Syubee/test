객체지향 프로그래밍 OPP 특징



집합관계 : 완성품과 부품의 관계

사용관계 : 객체가 다른 객체를 사용하는 관계

상속관계 : 객체들간의 관계 구축

위 세개를 예시로 들기
-> 부품객체를 만들어 이것들을 하나로 조립해가며 완성해가는 프로그래밍 기법

더욱쉬운 예시 ex)
자전거를 만들거라면 페달, 안장, 몸통, 손잡이, 바퀴등등 필요하지만 이 부품들을 순서와 관계없이 맞는것끼리 끼워서 완성시키는 기법


캡슐화 : 데이터(속성)을 처리하는 함수를 하나로 묶는것을 의미하고 캡슐화된 객체의 세부내용은 은폐(정보은닉)이 가능
자세한 설명 : 객체를 캡슐화 하면 은폐(정보은닉)되어서 변경시에 오류파급 효과가 적음 [ 정보 은닉 : 같은 데이터가 2개일때 각기 다른 클래스로 묶어두어 오류가 적음 ]
캡슐화의 장점 : 재사용에 용의

상속성 : 상속석은 상위클래스의 모든 속성과연산을 하위 클래스가 물려받는것
자세한 설명 : 하위 클래스는 상위클래스의 모든 속성과 연산을 다시 정의하지 않아도 자신의 속성으로 사용이 가능
자세한 설명2 : 또한 하위 클래스는 상속받은것을 추가로 새로운 속성/연산을 추가해서 사용이 가능
상속성의 장점 : 재사용하기 때문에 메모리절약이 가능


다형성 : 다형성이란 한 가지 형태로 여러가지의 기능을 수행할 수 있는것
자세한 설명 : 하나의 변수/함수명으로 상황에 따라 다른 의미로 해석이 가능


오버라이딩 : 상속성의 자세한 설명1을 뜻한다.

오버로딩 : 캡슐화 장점1에 대한 뜻을말한다.
추가설명 : 하나의 클래스 안에서 같은 이름의 메소드사용이 가능하지만 다른용도로 사용되며 그 결과물도 다르게 구현한다
추가설명2 : 오버로딩이 가능하려면 메소드끼리 이름은 같지만 매개변수의 갯수나 데이터타입이 달라야한다

매개변수 : 변할 수 있는 수

데이터타입 : 데이터 타입의 종류는 8가지 [ 종류 : short(2바이트), int(4바이트), char(2바이트), bloolean(참거짓 1바이트), float(4바이트), double(8바이트)


내가 내린 결론의 객체지향 프로그래밍 OPP의 특징 : 프로그래밍의 기법중 하나이다
내가 내린 객체지향 프로그래밍의 중요점 : 상속성(오버라이딩, 오버로딩)이 제일 큰 것 같다